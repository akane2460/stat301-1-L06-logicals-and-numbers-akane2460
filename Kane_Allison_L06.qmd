---
title: "L06 Logicals and Numbers"
subtitle: "Data Science 1 with R (STAT 301-1)"
aauthor: "Allison Kane "

format:
  html:
    toc: true
    embed-resources: true
    code-fold: show
    link-external-newwindow: true

execute:
  warning: false
  
from: markdown+emoji 
---

::: {.callout-tip icon=false}

## Github Repo Link

[Allison Github Link](https://github.com/stat301-1-2023-fall/L06-logicals-and-numbers-akane2460.git)

:::

## Load packages

```{r}
#| label: load-pkgs and data
#| code-fold: false

# Loading package(s)
library(tidyverse)
library(nycflights13)

# load data
college_rankings <- read_csv("data/college_rankings.csv")

```

## Datasets 

This lab utilizes the `flights` datasets contained in the `nycflights13` package. It also utilizes `college_rankings.csv`^[This dataset was sourced from [College Scorecard](https://collegescorecard.ed.gov/data) and [Times Higher Education](https://www.timeshighereducation.com/rankings/united-states/2022#!/length/-1/sort_by/rank/sort_order/asc/cols/scores)] data file for the case study. 

## Exercises

### Exercise 1 

Use `mutate()`, `is.na()`, and `count()` together to describe how the missing values in `dep_time`, `scheduled_dep_time`, and `dep_delay` are connected.

::: {.callout-tip icon="false"}
## Solution

Generally if departure time is missing, departure delay is missing. Scheduled departure time is never missing. This indicates that the missing values could indicate flight cancellations. 

```{r}
#| label: ex 01

flights |> 
  mutate(
    miss_dep_time = is.na(dep_time),
    miss_sched_dep_time = is.na(sched_dep_time),
    miss_dep_delay = is.na(dep_delay),
    .keep = "none"
  ) |> 
  count(miss_dep_time, miss_sched_dep_time, miss_dep_delay) |> 
  mutate(
    prop = n / sum(n),
    pct = 100 * prop)
```

:::

### Exercise 2

Find all flights where `arr_delay` is missing but `dep_delay` is not. Find all flights where neither `arr_time` nor `sched_arr_time` is missing, but `arr_delay` is.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 2 part 1

flights |> filter(is.na(arr_delay) == "TRUE" & is.na(dep_delay) == "FALSE") |> 
  relocate(arr_delay, dep_delay)

```
There are 1,175 flights with a missing arrival delay but a present departure delay. 


```{r}
#| label: ex 2 part 2

flights |> filter(is.na(arr_time) == "FALSE" &
                    is.na(sched_arr_time) == "FALSE" &
                    is.na(arr_delay) == "TRUE") |> 
            select(arr_time, sched_arr_time, arr_delay)

```



Flights without an arrival delay but with a departure delay indicate flights that could have been rerouted to another airport or a potential recording error with the data. There are 717 of these flights. 

:::

### Exercise 3

How many flights have a missing `dep_time`? What other variables are missing in these rows? What might these rows represent?

::: {.callout-tip icon="false"}
## Solution

8255 flights have a missing `dep_time`. Other variables missing in these rows include dep_delay, arr_time, and arr_delay. These missing variables make sense, generally because a missing dep_time should indicate a canceled flight (and therefore it cannot have departure delays, an arrival time or an arrival delay).

```{r}
#| label: ex 03

naniar::n_miss(flights$dep_time)

flights |> 
  filter(is.na(dep_time) == "TRUE")
```


:::

### Exercise 4

What will `sum(is.na(x))` tell you? How about `mean(is.na(x))`?

::: {.callout-tip icon="false"}
## Solution

`sum(is.na(x))` shows the total number of missing values of a variable x. 

`mean(is.na(x))` shows the proportion of missing values of a variable x.

:::

### Exercise 5

A number is even if itâ€™s divisible by two, which in R you can find out with `x %% 2 == 0`. Use this fact and `if_else()` to determine whether each number between 0 and 20 is even or odd.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 5

if_else(c(0:20) %% 2 == 0, "EVEN", "ODD")

```

:::

### Exercise 6

Replace the following calls to `count()` to instead use `group_by()`, `summarize()`, and `arrange()`:

`flights |> count(dest, sort = TRUE)`

`flights |> count(tailnum, wt = distance)`

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 6

flights |> 
  group_by(dest) |> 
  summarize(n = n()) |> 
  arrange(desc(n))

flights |> 
  group_by(tailnum) |> 
  summarize(n = n()) |> 
  arrange(n)
```


:::

### Exercise 7

a. For each destination, compute the total minutes of delay. 
b. For each `flight`, compute the proportion of the total delay for its destination.

::: {.callout-tip icon="false"}
## Solution
```{r}
#| label: ex 07 a

not_canceled <- flights |> 
  filter(!is.na(arr_delay)) 

not_canceled |> 
  filter(arr_delay > 0) |> 
  summarize(
    total_arr_delay = sum(arr_delay),
    mean_arr_delay = mean(arr_delay),
    med_arr_delay = median(arr_delay),
    n_flights = n(),
    .by = dest
  ) |> 
  arrange(desc(med_arr_delay))

```

```{r}
#| label: ex 07 b

not_canceled |> 
  filter(arr_delay > 0) |> 
  summarize(
    total_dest = sum(arr_delay),
    .by = c(flight, dest)
  ) |> 
  mutate(
    prop_arr_delay = total_dest / sum(total_dest),
    .by = flight
  ) |> 
  arrange(flight)

```


:::


## Case Study

Use the `college_rankings` file in the `data/` subdirectory.

::: {.callout-tip icon="false"}
## Solution

Part 1: Use `case_when()` to define each observation as either "Midwest", "Northeast", "South", or "West" as defined by the US Census Bureau. Call this new variable `region`.

```{r}
#| label: case study part 1

midwest <- c("WI", "IL", "ND", "SD", "NE", "MN", "KS","MI", "OH", "IN", "IA", "MO")

northeast <- c("PA", "NJ", "CT", "NY", "RI", "MA", "VT", "NH", "ME")

south <- c("DE", "MD", "WV", "DC", "VA", "KY", "TN", "NC", "SC",
           "GA", "FL", "AL", "MS", "AR", "LA", "OK", "TX")

west <- c("CA", "OR", "WA", "ID", "MT", "WY", "UT", "CO", "NV", "AZ", "NM")

college_rankings <- college_rankings |> 
  mutate(
    region =   case_when(
      state_abbr %in% midwest ~ "Midwest",
      state_abbr %in% northeast ~ "Northeast",
      state_abbr %in% south ~ "South",
      state_abbr %in% west ~ "West"
    )
  )

college_rankings |> 
  select(institution, region)
```

Part 2: Use an `ifelse` statement to change the `public` variable to be `TRUE` if it is public and `FALSE` if it is not.

```{r}
#| label: case study part 2

college_rankings <- college_rankings |> 
  mutate(public = ifelse(public == "public", TRUE, FALSE))

college_rankings |> 
  select(institution, public)

```

Part 3: Use the `cut` function to categorize the `overall_score` into bins spanning increments of 10.

```{r}
#| label: case study part 3

college_rankings$overall_score <- as.numeric(college_rankings$overall_score)

college_breaks <- seq(0, 100, by = 10)

college_rankings$overall_score <- 
  cut(college_rankings$overall_score, breaks = college_breaks, right = FALSE)

college_rankings |> 
  select(institution, overall_score)

```

Part 4: Round `tuition_fees` to the nearest $1,000.

```{r}
#| label: case study part 4

college_rankings$tuition_fees <-
  round(college_rankings$tuition_fees, digits = -3)

college_rankings |> 
  select(institution, tuition_fees)

```

:::


